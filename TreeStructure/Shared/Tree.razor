@using TreeStructure.Services
@using TreeStructure.Models
@inject NodeService NodeService

<li style="list-style-type: none">
    <!-- TODO: Fix this warnings -->
    <TreeItem Text="@RootNode.Name"
              Id="@((int)RootNode.Id)"
              OnCollapse="@(() => IsCollapsed = true)"
              OnExpand="@(() => IsCollapsed = false)"
              OnDelete="@(() => NodeService.DeleteNode((int)RootNode.Id))"
              OnEdit="@(() => OnEdit.InvokeAsync(RootNode))"
              IsCollapsed="IsCollapsed"/>
    @if (GetSortedChildren() is var children && children.Any() && !IsCollapsed)
    {
        <ol>
            @foreach (var child in children)
            {
                <Tree 
                    RootNode="@child" 
                    OnEdit="@OnEdit"
                    SortAscending="@SortAscending"
                    SortDescending="@SortDescending"/>
            }
        </ol>
    }
</li>

@code {

    [Parameter]
    public Node RootNode { get; set; }

    [Parameter]
    public bool IsCollapsed { get; set; } = true;

    [Parameter]
    public EventCallback<Node> OnEdit { get; set; }

    [Parameter]
    public bool SortAscending { get; set; }

    [Parameter]
    public bool SortDescending { get; set; }

    bool _showEditDialog = false;

    List<Node> GetSortedChildren()
    {
        var children = NodeService.GetChildren((int)RootNode.Id);

        return (SortAscending, SortDescending) switch {
            (true, false) => children.OrderBy(x => x.Name).ToList(),
            (false, true) => children.OrderByDescending(x => x.Name).ToList(),
            (false, false) or (true, true) => children };
    }

}