@page "/"
@using TreeStructure.Services

@inject NodeService NodeService
@inject ILogger<Index> Logger

@if (_showNodeEditDialog)
{
    <RenameNodeDialog
        Node="@_nodeToEdit"
        OnClose="@(OnRenameNodeDialogClose)"/>
}

@if (_showDeleteNodeWithChildrenDialog && _nodeToDelete is not null)
{
    <DeleteNodeWithChildrenDialog Node="@_nodeToDelete"
                                  OnClose="@(OnDeleteNodeDialogClose)"/>
}

<NodeForm OnAddNode="@(n => { NodeService.AddNode(n); Logger.LogInformation("Add node {Node}", n); })"/>

<Buttons
    IsSortAscending="@_sortAscending"
    IsSortDescending="@_sortDescending"
    OnSortAscending="@OnSortAscending"
    OnSortDescending="@OnSortDescending"
    OnDeleteAll="@(() => { NodeService.DeleteAllNodes(); Logger.LogInformation("Delete all nodes"); })"
    OnSampleData="@OnSampleData"/>

<!-- tree structure -->
@if (RootNodes.Any())
{
    @foreach (var rootNode in RootNodes)
    {
        <div class="my-4 p-4 ps-0 container rounded shadow">
            <ol>
                <Tree
                    Node="@rootNode"
                    OnEdit="@OnNodeEdit"
                    OnDelete="@OnDelete"
                    SortAscending="@_sortAscending"
                    SortDescending="@_sortDescending"/>
            </ol>
        </div>
    }
}
else
{
    <div class="my-4 p-4 container rounded shadow d-flex justify-content-center">
        <div class="p-2">
            <img src="img/info.svg" alt="info"/>
        </div>
        <div class="p-2">
            <p>Add some nodes to see the tree structure</p>
        </div>
    </div>
}

@code {

    bool _sortAscending;

    bool _sortDescending;

    List<Node> RootNodes => NodeService.GetRootNodes();

    bool _showNodeEditDialog;

    bool _showDeleteNodeWithChildrenDialog;

    Node? _nodeToEdit;

    Node? _nodeToDelete;

    void OnNodeEdit(Node node)
    {
        _showNodeEditDialog = true;
        Logger.LogInformation($"Show node edit dialog");
        _nodeToEdit = node;
    }

    void OnDelete(Node node)
    {
        if (NodeService.HasChildren((int)node.Id))
        {
            _showDeleteNodeWithChildrenDialog = true;
            Logger.LogInformation("Show delete node with children dialog");
            _nodeToDelete = node;
        }
        else
        {
            NodeService.DeleteNodeWithChildren(node);
            Logger.LogInformation("Delete node: {Node}", node);
            StateHasChanged();
        }
    }

    private void OnSortDescending()
    {
        _sortDescending = !_sortDescending;
        _sortAscending = false;
        Logger.LogInformation("Descending sort: {SortDescending}", _sortDescending);
    }

    private void OnSortAscending()
    {
        _sortAscending = !_sortAscending;
        _sortDescending = false;
        Logger.LogInformation("Ascending sort: {SortAscending}", _sortAscending);
    }

    private void OnSampleData()
    {
        NodeService.DeleteAllNodes();
        Logger.LogInformation("Delete all nodes");

        NodeService.Seed();
        Logger.LogInformation("Seed sample data");
    }

    private void OnDeleteNodeDialogClose()
    {
        _showDeleteNodeWithChildrenDialog = false;
        _nodeToDelete = null;
        Logger.LogInformation("Hide delete node dialog");
    }

    private void OnRenameNodeDialogClose()
    {
        _showNodeEditDialog = false;
        _nodeToEdit = null;
        Logger.LogInformation("Hide node edit dialog");
    }

}