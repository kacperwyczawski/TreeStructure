@page "/"
@using TreeStructure.Services

@inject NodeService NodeService
@inject ILogger<Index> Logger

@if (_showNodeEditDialog && _currentNodeId is not null)
{
    <RenameNodeDialog
        NodeId ="@((int)_currentNodeId)"
        OnClose="@OnRenameNodeDialogClose"/>
}

@if (_showDeleteNodeWithChildrenDialog && _currentNodeId is not null)
{
    <DeleteNodeWithChildrenDialog NodeId="@((int)_currentNodeId)"
                                  OnClose="@OnDeleteNodeDialogClose"/>
}

@if (_showMoveNodeDialog && _currentNodeId is not null)
{
    <MoveNodeDialog NodeId="@((int)_currentNodeId)"
                    OnClose="@OnMoveNodeDialogClose"/>
}

<NodeForm OnAddNode="@(n => NodeService.AddNode(n))"/>

<Buttons
    IsSortAscending="@_sortAscending"
    IsSortDescending="@_sortDescending"
    OnSortAscending="@OnSortAscending"
    OnSortDescending="@OnSortDescending"
    OnDeleteAll="@(() => NodeService.DeleteAllNodes())"
    OnSampleData="@(() => { NodeService.DeleteAllNodes(); NodeService.Seed(); })"
    OnExpandAll="@(() => OnExpandAll(_treeReference))"
    OnCollapseAll="@(() => OnCollapseAll(_treeReference))"/>

<!-- tree structure -->
@if (NodeService.GetRootNodes().Any())
{
    @foreach (var rootNode in GetSortedRootNodes())
    {
        <div class="my-4 p-4 ps-0 container rounded shadow">
            <ol>
                <Tree @ref="@_treeReference"
                      NodeId="@rootNode.Id"
                      OnEdit="@OnNodeEdit"
                      OnMove="@OnMoveNode"
                      OnDelete="@OnDelete"
                      SortAscending="@_sortAscending"
                      SortDescending="@_sortDescending"/>
            </ol>
        </div>
    }
}
else
{
    <div class="my-4 p-4 container rounded shadow d-flex justify-content-center">
        <div class="p-2">
            <img src="img/info.svg" alt="info"/>
        </div>
        <div class="p-2">
            <p>Add some nodes to see the tree structure (or click Sample Data button to fill database)</p>
        </div>
    </div>
}

@code {

    bool _sortAscending;

    bool _sortDescending;

    List<Node> GetSortedRootNodes()
    {
        var rootNodes = NodeService.GetRootNodes();

        return (_sortAscending, _sortDescending) switch {
            (true, false) => rootNodes.OrderBy(x => x.Name).ToList(),
            (false, true) => rootNodes.OrderByDescending(x => x.Name).ToList(),
            (false, false) or (true, true) => rootNodes };
    }

    bool _showNodeEditDialog;

    bool _showDeleteNodeWithChildrenDialog;

    bool _showMoveNodeDialog;

    int? _currentNodeId;

    Tree _treeReference;

    void OnNodeEdit(int id)
    {
        _showNodeEditDialog = true;
        Logger.LogInformation("Show node edit dialog");
        _currentNodeId = id;
    }

    void OnMoveNode(int id)
    {
        _showMoveNodeDialog = true;
        Logger.LogInformation("Show move node dialog");
        _currentNodeId = id;
    }

    void OnDelete(int id)
    {
        if (NodeService.HasChildren(id))
        {
            _showDeleteNodeWithChildrenDialog = true;
            Logger.LogInformation("Show delete node with children dialog");
            _currentNodeId = id;
        }
        else
        {
            NodeService.DeleteNodeRecursively(id);
            StateHasChanged();
        }
    }

    private void OnSortDescending()
    {
        _sortDescending = !_sortDescending;
        _sortAscending = false;
        Logger.LogInformation("Ascending sort: false");
        Logger.LogInformation("Descending sort: {SortDescending}", _sortDescending);
    }

    private void OnSortAscending()
    {
        _sortAscending = !_sortAscending;
        _sortDescending = false;
        Logger.LogInformation("Ascending sort: {SortAscending}", _sortAscending);
        Logger.LogInformation("Descending sort: false");
    }

    private void OnDeleteNodeDialogClose()
    {
        _showDeleteNodeWithChildrenDialog = false;
        _currentNodeId = null;
        Logger.LogInformation("Hide delete node dialog");
    }

    private void OnMoveNodeDialogClose()
    {
        _showMoveNodeDialog = false;
        _currentNodeId = null;
        Logger.LogInformation("Hide move node dialog");
    }

    private void OnRenameNodeDialogClose()
    {
        _showNodeEditDialog = false;
        _currentNodeId = null;
        Logger.LogInformation("Hide node edit dialog");
    }

    private void OnCollapseAll(Tree? tree)
    {
        // not working
        if (tree == null)
            return;

        tree.IsCollapsed = false;
        StateHasChanged();
        OnExpandAll(tree.ChildReference);
    }

    private void OnExpandAll(Tree? tree)
    {
        // not working
        if (tree == null)
            return;

        tree.IsCollapsed = false;
        StateHasChanged();
        OnExpandAll(tree.ChildReference);
    }

}