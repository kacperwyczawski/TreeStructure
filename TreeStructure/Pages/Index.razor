@page "/"
@using TreeStructure.Services
@using TreeStructure.Models

@inject NodeService NodeService

@if (_showNodeEditDialog)
{
    <RenameNodeDialog 
        Node="@_nodeToEdit" 
        OnClose="@(() => { _showNodeEditDialog = false; _nodeToEdit = null; })"/>
}

@if (_showDeleteNodeWithChildrenDialog && _nodeToDelete is not null)
{
    <DeleteNodeWithChildrenDialog Node="@_nodeToDelete" 
        OnClose="@(() => { _showDeleteNodeWithChildrenDialog = false; _nodeToDelete = null; })"/>
}

<NodeForm OnAddNode="@(n => NodeService.AddNode(n))"/>

<Buttons
    IsSortAscending="@_sortAscending"
    IsSortDescending="@_sortDescending"
    OnSortAscending="@(() => { _sortAscending = !_sortAscending; _sortDescending = false; })"
    OnSortDescending="@(() => { _sortDescending = !_sortDescending; _sortAscending = false; })"
    OnDeleteAll="@(() => NodeService.DeleteAllNodes())"
    OnSampleData="@(() => { NodeService.DeleteAllNodes(); NodeService.Seed(); })"/>

<!-- tree structure -->
@if (_rootNodes.Any())
{
    @foreach (var rootNode in _rootNodes)
    {
        <div class="my-4 p-4 ps-0 container rounded shadow">
            <ol>
                <Tree
                    Node="@rootNode"
                    OnEdit="@OnNodeEdit"
                    OnConfirmDelete="@OnConfirmNodeWithChildrenDelete"
                    SortAscending="@_sortAscending"
                    SortDescending="@_sortDescending"/>
            </ol>
        </div>
    }
}
else
{
    <div class="my-4 p-4 container rounded shadow d-flex justify-content-center">
        <div class="p-2">
            <img src="img/info.svg" alt="info"/>
        </div>
        <div class="p-2">
            <p>Add some nodes to see the tree structure</p>
        </div>
    </div>
}

@code {

    bool _sortAscending;
    
    bool _sortDescending;

    List<Node> _rootNodes = new();

    bool _showNodeEditDialog;
    
    bool _showDeleteNodeWithChildrenDialog;

    Node? _nodeToEdit;

    Node? _nodeToDelete;

    void OnNodeEdit(Node node)
    {
        _showNodeEditDialog = true;
        _nodeToEdit = node;
    }
    
    void OnConfirmNodeWithChildrenDelete(Node node)
    {
        _showDeleteNodeWithChildrenDialog = true;
        _nodeToDelete = node;
    }

    protected override void OnInitialized()
    {
    // get all nodes from database
        _rootNodes = NodeService.GetRootNodes();
    }

}