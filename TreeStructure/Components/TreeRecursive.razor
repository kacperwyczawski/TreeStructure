@using TreeStructure.Services
@inject NodeService NodeService

<li style="list-style-type: none">
    @*
        idk why I have to check if node exists here,
        but without it I get an exception after deleting node without children
    *@
    @if (NodeService.Exists(NodeId))
    {
        <TreeItem NodeId="@NodeId"
                  OnCollapse="@(() => IsCollapsed = true)"
                  OnExpand="@(() => IsCollapsed = false)"
                  OnDelete="@(() => OnDelete.InvokeAsync(NodeId))"
                  OnMove="@(() => OnMove.InvokeAsync(NodeId))"
                  IsCollapsed="@IsCollapsed"
                  CanBeExpanded="@NodeService.HasChildren(NodeId)"
                  ParentTree="@this"
                  ShowDisplayIndex="@CanBeReordered"
                  OnMoveDown="@(() => OnMoveDown.InvokeAsync(NodeId))"
                  OnMoveUp="@(() => OnMoveUp.InvokeAsync(NodeId))"/>
    }
    @if (NodeService.GetChildren(NodeId, Sort) is var children && children.Any() && !IsCollapsed)
    {
        <ol>
            @foreach (var child in children)
            {
                <TreeRecursive @ref="@ChildReference"
                               NodeId="@child.Id"
                               OnDelete="@OnDelete"
                               OnMove="@OnMove"
                               Sort="@Sort"
                               OnMoveDown="@OnMoveDown"
                               OnMoveUp="@OnMoveUp"/>
            }
        </ol>
    }
</li>

@code {

    [Parameter]
    [EditorRequired]
    public int NodeId { get; set; }

    [Parameter]
    public EventCallback<int> OnDelete { get; set; }

    [Parameter]
    public EventCallback<int> OnMove { get; set; }

    [Parameter]
    public EventCallback<int> OnMoveUp { get; set; }

    [Parameter]
    public EventCallback<int> OnMoveDown { get; set; }

    [Parameter]
    public NodeService.Sort Sort { get; set; } = NodeService.Sort.Ascending;

    public void Refresh()
    {
        StateHasChanged();
    }

    public bool IsCollapsed = true;

    public TreeRecursive? ChildReference;

    bool CanBeReordered => Sort is NodeService.Sort.Custom or NodeService.Sort.CustomReversed;

    bool _showEditDialog = false;

}