@using TreeStructure.Services
@inject NodeService NodeService

<ol>
    <li style="list-style-type: none">
        @if (NodeService.Exists(NodeId))
        {
            @* Node card *@
            <TreeViewItem NodeId="NodeId"
                          OnIsExpandedChanged="@(b => _displayChild = b)"
                          OnNodesChanged="@RefreshAll"/>

            @* Render children *@
            @if (_displayChild && NodeService.HasChildren(NodeId))
            {
                @foreach (var childId in NodeService.GetChildrenIds(NodeId, Sort))
                {
                    <TreeViewRecursive NodeId="@childId" PreviousIteration="this"/>
                }
            }
        }
    </li>
</ol>

@code {

    [Parameter]
    public int NodeId { get; set; }
    
    [Parameter]
    public EventCallback OnNodesChanged { get; set; }
    
    [Parameter]
    public TreeViewRecursive? PreviousIteration { get; set; }
    
    [CascadingParameter]
    public NodeService.Sort Sort { get; set; }
    
    public void Refresh()
    {
        StateHasChanged();
    }

    bool _displayChild;

    private void RefreshAll()
    {
        OnNodesChanged.InvokeAsync();
        StateHasChanged();
        PreviousIteration?.Refresh();
    }

}