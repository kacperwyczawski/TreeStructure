@using TreeStructure.Services
@inject NodeService NodeService
@inject IDialogService DialogService
@inject ILogger<TreeViewItem> Logger

<MudPaper Class="pa-3 ma-3 d-flex">
    <MudStack Row="true" AlignItems="AlignItems.Center">
        <MudFab Color="Color.Primary" Size="Size.Small" StartIcon="@ExpandCollapseIcon"
                OnClick="@(() => { _isExpanded = !_isExpanded; OnIsExpandedChanged.InvokeAsync(_isExpanded); })"
                Disabled="@(!NodeService.HasChildren(NodeId))"/>
        @if (_isEditing)
        {
            <MudTextField Label="Enter new name" Margin="Margin.Dense" Variant="Variant.Outlined"
                          @bind-Value="_newName" AutoFocus="true"/>

            <MudText Class="grey-text">
                #@NodeId
            </MudText>

            <MudFab StartIcon="@Icons.Material.Outlined.Close" Size="Size.Small"
                    OnClick="@(() => { _isEditing = false; _newName = null; })"/>

            <MudFab StartIcon="@Icons.Material.Outlined.Save" Size="Size.Small" Color="Color.Success"
                    OnClick="@Rename"/>
        }
        else
        {
            <MudText Typo="Typo.h6">
                <strong>@NodeService.GetNode(NodeId).Name</strong>
            </MudText>

            <MudText Class="grey-text">
                #@NodeId
            </MudText>
        }
    </MudStack>
    <div class="flex-grow-1"></div>
    <MudStack Row="true" AlignItems="AlignItems.Center">
        @if (Sort is NodeService.Sort.Custom or NodeService.Sort.CustomReversed)
        {
            @if (CanMoveUp)
            {
                <MudFab StartIcon="@Icons.Material.Outlined.MoveUp" Size="Size.Small"
                        OnClick="@MoveUp"/>
            }
            if (CanMoveDown)
            {
                <MudFab StartIcon="@Icons.Material.Outlined.MoveDown" Size="Size.Small"
                        OnClick="@MoveDown"/>
            }
        }
        <MudFab Color="Color.Success" StartIcon="@Icons.Material.Outlined.Add" Size="Size.Small"
                OnClick="@AddChildAsync"/>
        @if (_isMoving)
        {
            <MudAutocomplete T="Node" Label="Select new parent" Margin="Margin.Dense"
                             Variant="Variant.Outlined" @bind-Value="_newParent"
                             SearchFunc="@SearchNodes" ToStringFunc="@(n => $"{n.Name} #{n.Id}")"/>
            
            <MudFab StartIcon="@Icons.Material.Outlined.Close" Size="Size.Small"
                    OnClick="@(() => { _isMoving = false; _newParent = null; })"/>
            
            <MudFab StartIcon="@Icons.Material.Outlined.Save" Size="Size.Small" Color="Color.Success"
                    />
        }
        else
        {
            <MudFab StartIcon="@Icons.Material.Outlined.ForkLeft" Size="Size.Small"
                    OnClick="@(() => _isMoving = true)"/>
        }
        @if (!_isEditing)
        {
            <MudFab StartIcon="@Icons.Material.Outlined.EditNote" Size="Size.Small"
                    OnClick="@(() => _isEditing = true)"/>
        }
        <MudFab Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" Size="Size.Small"
                OnClick="@DeleteNodeAsync"/>
    </MudStack>
</MudPaper>