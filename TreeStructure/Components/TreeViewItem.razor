@using TreeStructure.Services
@inject NodeService NodeService
@inject IDialogService DialogService

<MudPaper Class="pa-3 ma-3 d-flex">
    <MudStack Row="true" AlignItems="AlignItems.Center">
        <MudFab Color="Color.Primary" Size="Size.Small" StartIcon="@ExpandCollapseIcon"
                OnClick="@(() => { _isExpanded = !_isExpanded; OnIsExpandedChanged.InvokeAsync(_isExpanded); })"
                Disabled="@(!NodeService.HasChildren(NodeId))"/>
        @if (_isEditing)
        {
            <MudTextField Label="Enter new name" Margin="Margin.Dense" Variant="Variant.Outlined"
                          @bind-Value="_newName" AutoFocus="true"/>

            <MudText Class="grey-text">
                #@NodeId
            </MudText>

            <MudFab StartIcon="@Icons.Material.Outlined.Close" Size="Size.Small"
                    OnClick="@(() => { _isEditing = false; _newName = null; })"/>

            <MudFab StartIcon="@Icons.Material.Outlined.Save" Size="Size.Small" Color="Color.Success"
                    OnClick="@Rename"/>
        }
        else
        {
            <MudText Typo="Typo.h6">
                <strong>@NodeService.GetNode(NodeId).Name</strong>
            </MudText>

            <MudText Class="grey-text">
                #@NodeId
            </MudText>
        }
    </MudStack>
    <div class="flex-grow-1"></div>
    <MudStack Row="true" AlignItems="AlignItems.Center">
        <MudFab Color="Color.Success" StartIcon="@Icons.Material.Outlined.Add" Size="Size.Small"
                OnClick="@AddChild"/>
        @if (!_isEditing)
        {
            <MudFab StartIcon="@Icons.Material.Outlined.EditNote" Size="Size.Small"
                    OnClick="@(() => _isEditing = true)"/>
        }
        <MudFab Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" Size="Size.Small"/>
    </MudStack>
</MudPaper>


@code {

    [Parameter]
    [EditorRequired]
    public int NodeId { get; set; }

    [Parameter]
    public EventCallback<bool> OnIsExpandedChanged { get; set; }
    
    [Parameter]
    public EventCallback OnNodeAdded { get; set; }

    bool _isExpanded;

    string ExpandCollapseIcon => _isExpanded
        ? Icons.Material.Outlined.KeyboardArrowDown
        : Icons.Material.Outlined.KeyboardArrowRight;

    bool _isEditing;

    string? _newName;

    private void Rename()
    {
        if (_newName == null)
            return;
        
        NodeService.RenameNode(NodeId, _newName);
        _newName = null;
        _isEditing = false;
    }
    
    async Task AddChild()
    {
        var parameters = new DialogParameters { { "ParentId", NodeId } };

        var dialog = DialogService.Show<AddNodeDialog>("Add child", parameters);
        
        var result = await dialog.Result;

        if (!result.Cancelled)
            await OnNodeAdded.InvokeAsync();
    }

}