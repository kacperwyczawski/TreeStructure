@using TreeStructure.Services
@inject NodeService NodeService

<li style="list-style-type: none">
    <!-- TODO: Fix this warnings -->
    <TreeItem Text="@Node.Name"
              Id="@((int)Node.Id)"
              OnCollapse="@(() => IsCollapsed = true)"
              OnExpand="@(() => IsCollapsed = false)"
              OnDelete="@(() => OnDelete.InvokeAsync(Node))"
              OnEdit="@(() => OnEdit.InvokeAsync(Node))"
              IsCollapsed="@IsCollapsed"
              CanBeExpanded="@NodeService.HasChildren((int)Node.Id)"/>
    @if (GetSortedChildren() is var children && children.Any() && !IsCollapsed)
    {
        <ol>
            @foreach (var child in children)
            {
                <Tree @ref="@ChildReference"
                      Node="@child"
                      OnEdit="@OnEdit"
                      OnDelete="@OnDelete"
                      SortAscending="@SortAscending"
                      SortDescending="@SortDescending"/>
            }
        </ol>
    }
</li>

@code {

    [Parameter]
    public Node Node { get; set; }

    [Parameter]
    public EventCallback<Node> OnEdit { get; set; }

    [Parameter]
    public EventCallback<Node> OnDelete { get; set; }

    [Parameter]
    public bool SortAscending { get; set; }

    [Parameter]
    public bool SortDescending { get; set; }

    public bool IsCollapsed = true;

    public Tree? ChildReference;

    bool _showEditDialog = false;

    List<Node> GetSortedChildren()
    {
        var children = NodeService.GetChildren((int)Node.Id);

        return (SortAscending, SortDescending) switch {
            (true, false) => children.OrderBy(x => x.Name).ToList(),
            (false, true) => children.OrderByDescending(x => x.Name).ToList(),
            (false, false) or (true, true) => children };
    }

}