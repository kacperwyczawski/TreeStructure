@using TreeStructure.Services
@inject NodeService NodeService

<li style="list-style-type: none">
    @*
        idk why I have to check if node exists here,
        but without it I get an exception after deleting node without children
    *@
    @if (NodeService.Exists(NodeId))
    {
        <TreeItem NodeId="@NodeId"
                  OnCollapse="@(() => IsCollapsed = true)"
                  OnExpand="@(() => IsCollapsed = false)"
                  OnDelete="@(() => OnDelete.InvokeAsync(NodeId))"
                  OnMove="@(() => OnMove.InvokeAsync(NodeId))"
                  IsCollapsed="@IsCollapsed"
                  CanBeExpanded="@NodeService.HasChildren(NodeId)"
                  ParentTree="@this"/>
    }
    @if (GetSortedChildren() is var children && children.Any() && !IsCollapsed)
    {
        <ol>
            @foreach (var child in children)
            {
                <Tree @ref="@ChildReference"
                      NodeId="@child.Id"
                      OnDelete="@OnDelete"
                      OnMove="@OnMove"
                      SortAscending="@SortAscending"
                      SortDescending="@SortDescending"/>
            }
        </ol>
    }
</li>

@code {

    [Parameter]
    [EditorRequired]
    public int NodeId { get; set; }

    [Parameter]
    public EventCallback<int> OnDelete { get; set; }

    [Parameter]
    public EventCallback<int> OnMove { get; set; }

    [Parameter]
    public bool SortAscending { get; set; }

    [Parameter]
    public bool SortDescending { get; set; }
    
    public void Refresh()
    {
        StateHasChanged();
    }

    public bool IsCollapsed = true;

    public Tree? ChildReference;

    bool _showEditDialog = false;

    List<Node> GetSortedChildren()
    {
        var children = NodeService.GetChildren(NodeId);

        return (SortAscending, SortDescending) switch {
            (true, false) => children.OrderBy(x => x.Name).ToList(),
            (false, true) => children.OrderByDescending(x => x.Name).ToList(),
            (false, false) or (true, true) => children };
    }

}