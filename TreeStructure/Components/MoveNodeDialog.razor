@using TreeStructure.Services
@inject NodeService NodeService
@inject ILogger<MoveNodeDialog> Logger

<div class="modal" style="display:block" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">

            <div class="modal-header">
                <h3 class="modal-title">
                    Move node
                    <span class="text-primary">@NodeService.GetName(NodeId)</span>
                    <span class="text-muted">#@NodeId</span>
                </h3>
                <button type="button" class="btn-close" @onclick="@OnClose"></button>
            </div>

            <div class="modal-body">
                <form>
                    <label for="newParentId" class="form-label">Move to id:</label>
                    <input type="number"
                           class="form-control"
                           id="newParentId"
                           @bind="_newParentId"
                           placeholder="@NodeService.GetNode(NodeId).ParentId"
                           required>
                </form>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" @onclick="@OnClose">
                    Cancel
                </button>
                <button type="button" class="btn btn-primary" @onclick="@(() => OnMove(true))">
                    Make root
                </button>
                <button type="button" class="btn btn-primary" @onclick="@(() => OnMove())">
                    Move
                </button>
            </div>

        </div>
    </div>
</div>

@code {

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    [EditorRequired]
    public int NodeId { get; set; }

    int? _newParentId;

    void OnMove(bool makeRoot = false)
    {
        var oldParentId = NodeService.GetNode(NodeId).ParentId;
        
        if (_newParentId is null && !makeRoot)
        {
            Logger.LogWarning("Trying to move node to null parent");
            return;
        }

        if (oldParentId is null && makeRoot)
        {
            Logger.LogWarning("Node #{NodeId} is already root", NodeId);
            OnClose.InvokeAsync();
            return;
        }
        
        if (_newParentId is { } notNullId && NodeService.Exists(notNullId) == false)
        {
            Logger.LogWarning("Trying to move node to non-existing parent {ParentId}", notNullId);
            return;
        }

        Logger.LogInformation("Change parent of node #{NodeId} form #{OldParentId} to #{NewParentId}",
            NodeId, oldParentId, _newParentId);
        
        NodeService.ChangeParent(NodeId, _newParentId);
        
        // if was root, make it's children roots
        if (oldParentId is null)
        {
            foreach (var child in NodeService.GetChildren(NodeId))
            {
                NodeService.ChangeParent(child.Id, null);
            }
        }

        OnClose.InvokeAsync();
    }

}